[[server-rest-api]]
REST API
========

The Neo4j REST API is designed with discoverability in mind, so that you can start with a +GET /+ and from there discover URIs to perform other requests.
Examples below uses URIs for examples; they are subject to change in the future, so for future-proofness _discover URIs where possible_, instead of relying on the current layout.
The default representation is http://www.json.org/[json], both for responses and for data sent with +POST+/+PUT+ requests.

Below follows a listing of ways to interact with the REST API.
You can also see a (at runtime) generated description of the API be pointing your browser to the (exact URI may vary) http://localhost:7474/db/data/application.wadl

To interact with the JSON interface you must explicitly set the request header +Accept:application/json+ for those requests that responds with data.
You should also set the header +Content-Type:application/json+ if your request sends data, for example when you're creating a relationship.

== Root ==

include::retrieving-the-data-root-endpoint.txt[]

== Nodes ==

include::create-a-node.txt[]

include::create-node-with-properties.txt[]

include::get-node.txt[]

include::get-non-existent-node.txt[]

include::delete-node.txt[]

include::nodes-with-relationships-can-not-be-deleted.txt[]

== Properties ==

include::set-property-on-node.txt[]

include::update-node-properties.txt[]

include::get-properties-for-node.txt[]

include::get-empty-properties-for-node.txt[]

include::property-values-can-not-be-null.txt[]

include::property-values-can-not-be-nested.txt[]

include::delete-all-properties-from-node.txt[]

== Relationships ==

include::create-relationship.txt[]

include::update-relationship-properties.txt[]

== Indexes ==

include::create-a-named-node-index.txt[]


