[[rest-api]]
REST API
========

The Neo4j REST API is designed with discoverability in mind, so that you can start with a +GET+ on the <<rest-api-service-root,service root>> and from there discover URIs to perform other requests.
The examples below uses URIs in the examples; they are subject to change in the future, so for future-proofness _discover URIs where possible_, instead of relying on the current layout.
The default representation is http://www.json.org/[json], both for responses and for data sent with +POST+/+PUT+ requests.

Below follows a listing of ways to interact with the REST API.
You can also see a (at runtime) generated description of the API be pointing your  browser to the (exact URI may vary) http://localhost:7474/db/data/application.wadl

To interact with the JSON interface you must explicitly set the request header +Accept:application/json+ for those requests that responds with data.
You should also set the header +Content-Type:application/json+ if your request sends data, for example when you're creating a relationship.
The examples include the relevant request and response headers.

[[rest-api-service-root]]
== Service root ==

include::get-service-root.txt[]

== Nodes ==

include::create-a-node.txt[]

include::create-node-with-properties.txt[]

include::get-node.txt[]

include::get-non-existent-node.txt[]

include::delete-node.txt[]

include::nodes-with-relationships-can-not-be-deleted.txt[]

== Relationships ==

////
GET /node/123/relationships/{dir}/{-list|&|types}

Where dir is one of all,in,out and types is an ampersand-separated list of types. Some examples:

* GET /node/123/relationships/out/KNOWS&LOVES -- outgoing relationships of types KNOWS and LOVES
* GET /node/123/relationships/all/KNOWS -- relationships (both outgoing and incoming) of type LOVES
* GET /node/123/relationships/in -- incoming relationships
////

include::create-relationship.txt[]

include::update-relationship-properties.txt[]

include::get-all-relationships.txt[]

include::get-incoming-relationships.txt[]

include::get-outgoing-relationships.txt[]

include::get-typed-relationships.txt[]

include::get-relationships-on-a-node-without-relationships.txt[]

include::get-relationship-types.txt[]

== Properties ==

include::set-property-on-node.txt[]

include::update-node-properties.txt[]

include::get-properties-for-node.txt[]

include::get-empty-properties-for-node.txt[]

include::property-values-can-not-be-null.txt[]

include::property-values-can-not-be-nested.txt[]

include::delete-all-properties-from-node.txt[]

== Indexes ==

include::create-a-named-node-index.txt[]


