Social Network

    Social networks (know as social graphs out on the web) are natural to
    model with a graph. This example shows a very simple social model
    that connects friends and keeps track of status updates.

Simple Social Model

[./images/social-uml.png] Social network domain model 

    The domain model for a social network is pretty simple: <<<Persons>>> with names
    and <<<StatusUpdates>>> with timestamped text. These entities are then connected
    by specific relationships.

* <<<Person>>>

    * <<<friend>>>: relates two distinct <<<Person>>> instances (no self-reference)
    * <<<status>>>: connects to the most recent <<<StatusUpdate>>>

* <<<StatusUpdate>>>

    * <<<person>>>: connects back to the owning <<<Person>>>
    * <<<previous>>>: points to the previous <<<StatusUpdate>>>  

Status Graph Instance

    The <<<StatusUpdate>>> list for a <<<Person>>> is a linked list. The head
    of the list (the most recent status) is found by following <<<status>>>.
    Each subsequent <<<StatusUpdate>>> is connected by <<<previous>>>. Every
    <<<StatusUpdate>>> connects directy back to <<<Person>>> through a <<<person>>>,
    making it efficient to get back to the owner when the list gets large.

    Here's an example where Andreas Kollegger micro-blogged his way to work 
    in the morning:

[./images/social_status.png] Andreas Kollegger's status updates

Path finding example

    What we want to achieve here is to create a network between friends.
    So the basic structure of our data goes like this:

[./images/social-network.png] Node space view
