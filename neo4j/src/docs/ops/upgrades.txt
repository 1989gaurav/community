[[deployment-upgrading]]
Upgrading
=========

Normally a properly shutdown Neo4j database can be upgraded directly to a new minor version. 
Forward compatibility is only guaranteed between minor versions, for example from 1.1 -> 1.2.
Databases cannot be downgraded. 

[WARNING]
Upgrading from 1.2 -> 1.3 must be done explicitly since store format has changed between those two versions.

To do a normal upgrade (which doesn't require additional attention):

. download the newer version of neo4j.
. cleanly shutdown the database to upgrade, if it is running.
. startup the database with the newer version of neo4j.

[[deployment-upgrading-1.3]]
== Upgrade 1.2 -> 1.3 ==

The store format, as well as logical log format, have changed between these two versions to allow for bigger stores. 

Versions prior to 1.3 have used id ranges of an integer, which yielded a highest possible number of nodes/relationships/properties of _2^32 - 1_ each.

Starting with version 1.3 some unused bits are used for each entity to extend the id ranges. _Nodes and relationships_ got three more bits which means their id range increased to _32 billion_ from 4,2 billion. _Properties_ got four extra bits, taking it up to _64 billion_.

[IMPORTANT]
Although id ranges has been increased the space used to store the database will not increase compared to the previous version.

Upgrading between these two version needs to be performed explicitly using a configuration parameter at startup (see below).

[CAUTION]
Upgrade cannot be performed if either the number of relationship types or the configured block size for either the dynamic array store or string store is greater than 2^16 - 1 (65534).

. make sure the database you are upgrading have been cleanly shut down and will start with the configuration parameter "allow_store_upgrade=true".
. start the database.
. the upgrade will happen during startup and the process is done when the database has been successfully started.
. "allow_store_upgrade=true" configuration parameter should be removed.

