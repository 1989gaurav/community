JVM Settings
============

Configuring JVM heap and the garbage collector properly is very important. As an example, a poorly tweaked JVM could spend all CPU time performing garbage collection (blocking all threads from performing any work). Requirements such as latency, total throughput and available hardware has to be considered to find the right setup. In production it is recommended to run Neo4j on a multi core/CPU platform putting the JVM in server mode.
 
== Configuring heap size and GC for the JVM ==

A Large heap allows for larger node and relationship caches which is a good thing but large heaps can also lead to latency problems caused by full garbage collections. The different high level cache implementations available in Neo4j together with a suitable JVM configuration of heap size and GC should be able to handle most workloads.

The default cache (soft reference based LRU cache) works best with a heap that never gets full meaning the application workload is such that most nodes and relationships that are used can be cached. If the heap gets to full there is a risk that a full GC will be triggered and figuring out what soft references should be cleared will take longer the larger the heap. 

Using the strong reference cache means all the nodes and relationships being used must fit in available heap or there is a risk of getting out of memory exceptions. The soft reference and strong reference caches are well suited for applications were the overal throughput is important.

The weak reference cache basically needs enough heap to handle the peak load of the application (how much memory will the avg request require*peak load) and is well suited for low latency requirements were GC interuptions are not acceptable.

Also remember when running Neo4j on Windows the size of the memory mapped buffers are allocated on heap by default and needs to be taken into consideration when determining heap size.

.Guidelines for heap size
[format="csv",width="60%",cols="4"]
[frame="topbot",grid="none",options="header"]
|======================================================================================================
Number of primitives,RAM size,Heap configuration,Reserved RAM for the OS
10M,2GB,512MB,the rest
100M,4-8GB,1-4GB,1-2GB
1B+,8-32GB,4GB+,1-2GB
|======================================================================================================

The recommended garbage collector to use when running Neo4j in production is the Concurrent Mark and Sweep Compactor turned on by supplying -XX:+UseConcMarkSweepGC as a JVM parameter.
